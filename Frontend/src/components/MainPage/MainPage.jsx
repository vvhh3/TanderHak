
import { useState } from 'react';
import './MainPage.css';
import axios from 'axios';
import Fuse from "fuse.js";
import { useNavigate } from 'react-router-dom';
import { BrowserRouter, Scripts } from "react-router-dom";
import { ReactTyped } from "react-typed";
export function MainPage() {
    const suggestions = [
        "–ø–æ–∏—Å–∫", "–Ω–∞–π–¥–∏", "–ø–æ–∏—â–∏", "–∏—â–∏", "–Ω–∞–π—Ç–∏", "–ø–æ–∫–∞–∂–∏", "–æ—Ç—ã—â–∏", "–æ—Ç—ã—Å–∫–∞—Ç—å", "–∫–∞–∫", "–≥–¥–µ",// –ü–æ–∏—Å–∫
        "—Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏", "—Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é", "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –∫–æ–º–ø–∞–Ω–∏—é", "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏—Ä–º—É", "–æ—Ñ–æ—Ä–º–∏ –∫–æ–º–ø–∞–Ω–∏—é", "–¥–æ–±–∞–≤—å –∫–æ–º–ø–∞–Ω–∏—é", "–∑–∞–≤–µ–¥–∏ –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é", "—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏",//–ö–æ–º–ø–∞–Ω–∏—è
        "—Å–æ–∑–¥–∞–π –Ω–æ–≤—É—é –∑–∞–∫—É–ø–∫—É", "—Å–æ–∑–¥–∞—Ç—å –∑–∞–∫—É–ø–∫—É", "–æ—Ñ–æ—Ä–º–∏ –∑–∞–∫—É–ø–∫—É", "–¥–æ–±–∞–≤—å –∑–∞–∫—É–ø–∫—É", "–Ω–∞—á–Ω–∏ –∑–∞–∫—É–ø–∫—É", "—Å–¥–µ–ª–∞–π –∑–∞–∫—É–ø–∫—É", "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –∑–∞–∫—É–ø–∫—É", "—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–∫—É–ø–∫—É",//–ó–∞–∫—É–ø–∫–∏
        "—Å–æ–∑–¥–∞–π –Ω–æ–≤—É—é –ø—Ä—è–º—É—é –∑–∞–∫—É–ø–∫—É", "—Å–æ–∑–¥–∞—Ç—å –ø—Ä—è–º—É—é –∑–∞–∫—É–ø–∫—É", "–æ—Ñ–æ—Ä–º–∏ –ø—Ä—è–º—É—é –∑–∞–∫—É–ø–∫—É", "–¥–æ–±–∞–≤—å –ø—Ä—è–º—É—é –∑–∞–∫—É–ø–∫—É", "–Ω–∞—á–Ω–∏ –ø—Ä—è–º—É—é –∑–∞–∫—É–ø–∫—É", "—Å–¥–µ–ª–∞–π –ø—Ä—è–º—É—é –∑–∞–∫—É–ø–∫—É", "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –ø—Ä—è–º—É—é –∑–∞–∫—É–ø–∫—É", "—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä—è–º—É—é –∑–∞–∫—É–ø–∫—É",//–ü—Ä—è–º–∞—è –∑–∞–∫—É–ø–∫–∞
        "—Å–æ–∑–¥–∞–π –Ω–æ–≤—É—é –∑–∞–∫—É–ø–∫—É –ø–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º", "—Å–æ–∑–¥–∞—Ç—å –∑–∞–∫—É–ø–∫—É –ø–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º", "–æ—Ñ–æ—Ä–º–∏ –∑–∞–∫—É–ø–∫—É –ø–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º", "–¥–æ–±–∞–≤—å –∑–∞–∫—É–ø–∫—É –ø–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º", "–Ω–∞—á–Ω–∏ –∑–∞–∫—É–ø–∫—É –ø–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º", "—Å–¥–µ–ª–∞–π –∑–∞–∫—É–ø–∫—É –ø–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º", "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –∑–∞–∫—É–ø–∫—É –ø–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º", "—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–∫—É–ø–∫—É –ø–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º",//–ó–∞–∫—É–ø–∫–∞ –ø–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º   
        "—Å–æ–∑–¥–∞–π –Ω–æ–≤—É—é –∑–∞–∫—É–ø–∫—É —É –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", "—Å–æ–∑–¥–∞—Ç—å –∑–∞–∫—É–ø–∫—É —É –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", "–æ—Ñ–æ—Ä–º–∏ –∑–∞–∫—É–ø–∫—É —É –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", "–¥–æ–±–∞–≤—å –∑–∞–∫—É–ø–∫—É —É –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", "–Ω–∞—á–Ω–∏ –∑–∞–∫—É–ø–∫—É —É –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", "—Å–¥–µ–ª–∞–π –∑–∞–∫—É–ø–∫—É —É –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –Ω–æ–≤—É—é –∑–∞–∫—É–ø–∫—É —É –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", "—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–∫—É–ø–∫—É —É –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞",//–ó–∞–∫—É–ø–∫–∞ –ø–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º   
        "—Å–æ–∑–¥–∞—Ç—å –ö–°", "—Å–æ–∑–¥–∞–π –ö–°", "–æ—Ñ–æ—Ä–º–∏ –ö–°", "–¥–æ–±–∞–≤—å –ö–°", "–∑–∞–≤–µ–¥–∏ –ö–°", "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –ö–°", "—Å–¥–µ–ª–∞–π –ö–°",//KC
        "–∫—É–ø–∏—Ç—å", "—Ö–æ—á—É –∫—É–ø–∏—Ç—å", "–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏", "–∫—É–ø–∏", "–∑–∞–∫–∞–∑–∞—Ç—å", "–∑–∞–∫–∞–∂–∏", "–≤–æ–∑—å–º–∏", "—Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å", "—Å–¥–µ–ª–∞–π –∑–∞–∫–∞–∑", "—Ö–æ—á—É –∫—É–ø–∏—Ç—å", "–æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–∫—É–ø–∫—É", "–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏", "–ø—Ä–∏–±—Ä–µ—Ç–∏", "–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ",//–ü–æ–∫—É–ø–∫–∏
        "–¥–æ–±–∞–≤—å",
        "—Å–¥–µ–ª–∞–π",
        "–Ω–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–≤–∞–Ω–∞ –∏ –ø–æ–º–µ–Ω—è–π –ø–æ—á—Ç—É –Ω–∞ (–≤—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ª—é–±—É—é –ø–æ—á—Ç—É)",
        "—Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∏–≤–∞–Ω—É",
        "—É–¥–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∏–≤–∞–Ω—É",
        ,
    ];


    const fuse = new Fuse(suggestions, { threshold: 0.4, distance: 50 });
    const [input, setInput] = useState("");
    const [results, setResults] = useState([]);
    const [messages, setMessages] = useState([]);
    const [estimation, setEstimation] = useState(null)
    const [like, setLike] = useState();
    const navigate = useNavigate();

    const handleChange = (e) => {
        const value = e.target.value;
        setInput(value);

        if (!value.trim()) {
            setResults([]);
            return;
        }

        const words = value.trim().split(/\s+/);
        const lastWord = words[words.length - 1] || "";
        const matches = fuse.search(lastWord);
        setResults(matches.map((m) => m.item));
    };

    const handleSuggestionClick = (suggestion) => {
        const words = input.trim().split(/\s+/);
        words[words.length - 1] = suggestion;
        const newValue = words.join(" ");
        setInput(newValue + " ");
        setResults([]);
    };

    const handleSubmit = async () => {
        if (!input.trim()) return;

        setMessages(prev => [...prev, { role: "user", text: input }]);

        try {
            const res = await axios.post("http://45.150.8.176:8080/api/chat", {
                user_id: 1,
                message: input,
            });

            const botResponse = res.data.response;
            setMessages(prev => [...prev, { role: "bot", text: botResponse, rating:null }]);
        } catch (err) {
            console.error(err);
            setMessages(prev => [...prev, { role: "bot", text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ" }]);
        }

        setInput("");
        setResults([]);
    };

    const handleRateMessage = (index, rating) => {
        setMessages(prev =>
            prev.map((msg, i) => {
                if (i !== index) return msg;
                if (msg.rating !== null) return msg;
                return { ...msg, rating };
            })
        );

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ –±—ç–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        // axios.post("/api/rate", { messageId: index, rating });
    };

    return (
        <div className="mainPage">
            <div className='hManePage'>
                <ReactTyped
                    strings={[
                        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ",
                        "–ß–µ–º –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?"
                    ]}
                    typeSpeed={50}   // —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏
                    backSpeed={30}   // —Å–∫–æ—Ä–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å —Ü–∏–∫–ª)
                    loop={false}     // –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∏–ª–∏ –Ω–µ—Ç
                />

            </div>
            <div className="chatWindow">
                {messages.map((msg, i) => (
                    <div key={i} className={`message ${msg.role}`}>
                        <p>{msg.text}</p>
                        {msg.role === "bot" && (
                            <div className="rating-buttons">
                                <button
                                    className={msg.rating === true ? "active" : ""}
                                    onClick={() => handleRateMessage(i, true)}
                                    disabled={msg.rating !== null} // –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ –µ—Å—Ç—å
                                >
                                    üëç
                                </button>
                                <button
                                    className={msg.rating === false ? "active" : ""}
                                    onClick={() => handleRateMessage(i, false)}
                                    disabled={msg.rating !== null} // –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ –µ—Å—Ç—å
                                >
                                    üëé
                                </button>
                            </div>
                        )}
                    </div>
                ))}
            </div>

            <div className="searchInputBlock">
                <div className='typed'>
                    <ReactTyped
                        strings={suggestions}
                        typeSpeed={50}   // —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏
                        backSpeed={30}   // —Å–∫–æ—Ä–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å —Ü–∏–∫–ª)
                        loop={true}     // –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∏–ª–∏ –Ω–µ—Ç
                    />

            </div>
            <div className="chatWindow">
                {messages.map((msg, i) => (
                    <div key={i} className={`message ${msg.role}`}>
                        <span className="bubble">{msg.text}</span>
                    </div>
                ))}
            </div>
                
            <div className="searchInputBlock">
                <div className='typed'>
                     <ReactTyped
                        strings={suggestions}
                        typeSpeed={50}   // —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏
                        backSpeed={30}   // —Å–∫–æ—Ä–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å —Ü–∏–∫–ª)
                        loop={true}     // –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∏–ª–∏ –Ω–µ—Ç
                    />
                </div>
                <input
                    type="text"
                    value={input}
                    onChange={handleChange}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å..."
                    className="searchInput"
                />

                {results.length > 0 && (
                    <ul className="suggestionsList">
                        {results.map((r, i) => (
                            <li
                                key={i}
                                onClick={() => handleSuggestionClick(r)}
                                className="suggestionItem"
                            >
                                {r}
                            </li>
                        ))}
                    </ul>
                )}


                <button onClick={handleSubmit} className="sendButton">
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </button>
            </div>
        </div>
    );
                <input
                    type="text"
                    value={input}
                    onChange={handleChange}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å..."
                    className="searchInput"
                />

                {results.length > 0 && (
                    <ul className="suggestionsList">
                        {results.map((r, i) => (
                            <li
                                key={i}
                                onClick={() => handleSuggestionClick(r)}
                                className="suggestionItem"
                            >
                                {r}
                            </li>
                        ))}
                    </ul>
                )}


    <button onClick={handleSubmit} className="sendButton">
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </button>
            </div>
        </div>
    );
}
export default MainPage;